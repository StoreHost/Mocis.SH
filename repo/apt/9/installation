#!/bin/bash
########################################################################
# Developed by Store-Host                                              #
# Version 0.1                                                          #
# Web: https://www.store-host.com                                      #
# 	Mocis is distributed in the hope that it will be useful,           #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of     #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      #
#   GNU General Public License for more details.                       #
########################################################################
########################################################################
# In this file are all installation which                              #
# can be executed and installed under Debian 9 "Scretch".              #
# Please only with caution and extreme caution commands                #
# or change functions.                                                 #
########################################################################
########################################################################
#   Importing Dialog Variables from the exectuted Menu                 #
########################################################################
#                                                                      #
########################################################################
########################################################################
#   importing color codes                                              #
########################################################################
source '/usr/share/mocis/sys/lib/lib.color'
########################################################################
########################################################################
#   Importing Error handler and stuff to protect                       #
########################################################################
function errorhandling {
  source '/usr/share/mocis/sys/lib/lib.errortrap.sh'
}
########################################################################
#   Spinner                                                            #
########################################################################
spin() {
   local -a marks=( '/' '-' '\' '|' )
   while [[ 1 ]]; do
     printf '%s\r' "${marks[i++ % ${#marks[@]}]}"
     sleep 1
   done
 }
########################################################################
#   Powered by                                                         #
########################################################################

function _printPoweredBy()
{
    cat <<"EOF"

    Powered By:
    __  __            _        _____ _    _
   |  \/  |          (_)      / ____| |  | |
   | \  / | ___   ___ _ ___  | (___ | |__| |
   | |\/| |/ _ \ / __| / __|  \___ \|  __  |
   | |  | | (_) | (__| \__ \_ ____) | |  | |
   |_|  |_|\___/ \___|_|___(_)_____/|_|  |_|


   >> Web: https://mocis.sh
   >> Store: https://www.store-host.com

  ################################################################
EOF
}

########################################################################
#   S.M.A.R.T HDD Check                                                #
########################################################################
function F_smartctl {
  if [[ $1 = start_smartctl ]]; then
    _printPoweredBy
  fi
}

########################################################################
#   MySQL MariaDB                                                      #
########################################################################
function F_mariadb {
  red "importing errortrap..."
  errorhandling
  red "loaded & starting now..."
  sleep 2
  if [ $1 = start_mariadb ]; then
    UP=$(pgrep mysql | wc -l);
    if [ "$UP" = 0 ];
    then
        red "MariaDB is not installed...";
        apt-get install mariadb-server -y

        clear
        mysql_secure_installation

      else
        green "MySQL server is allredy installed"
      fi
  return 0
fi
}
########################################################################
#   Nextcloud                                                          #
########################################################################
function F_nextcloud {
  if [[ $1 = start_netxtcloud ]]; then
      UP=$(pgrep mysql | wc -l);
      if [ "$UP" = 0 ];
      then
        red "MariaDB is not installed..."
        sleep 2
        apt-get install mariadb-server -y
        clear
        mysql_secure_installation
      else
        green "MySQL server is allredy installed"
        sleep 2
      fi
      UP=$(pgrep apache2 | wc -l);
      if [ "$UP" = 0 ];
      then
        red "Apache is not installed..."
        sleep 2
        apt-get install apache2 -y
      else
        green "Apache server is allredy installed"
        sleep 2
      fi
      green "Please enter your Subdomain or IP address"
      read subomain
      green "importing errortrap..."
      errorhandling
      green "loaded & starting now..."
      sleep 2
      green "Installing PHP extencions"
    	apt-get install php7.0-xml php7.0 php7.0-cgi php7.0-cli php7.0-gd -y
      apt-get install php7.0-curl php7.0-zip php7.0-mysql -y
      apt-get install libapache2-mod-php php7.0-mbstring unzip -y
      red "Please enter this phrase after the mysql login"
      green "CREATE USER 'nextcloud'@'localhost' IDENTIFIED BY 'YOUR-PASSWORD';"
      green "GRANT ALL PRIVILEGES ON nextclouddb.* TO 'nextcloud'@'localhost';"
      green "FLUSH PRIVILEGES;"
      green "quit"
      sleep 10
      mysql -u root -p
      wget https://download.nextcloud.com/server/releases/nextcloud-13.0.0.zip
      unzip nextcloud-13.0.0.zip
      mv nextcloud /var/www/html/
      chown -R www-data:www-data /var/www/html/nextcloud
      cat <<EOF >> /etc/apache2/sites-available/nextcloud.conf
      <VirtualHost *:80>
      ServerName $Subdomain
      ServerAdmin admin@$subomain
      DocumentRoot "/var/www/html/nextcloud"
      <Directory "/var/www/html/nextcloud/">
      Options MultiViews FollowSymlinks

      AllowOverride All
      Order allow,deny
      Allow from all
      </Directory>
      TransferLog /var/log/apache2/nextcloud_access.log
      ErrorLog /var/log/apache2/nextcloud_error.log
      </VirtualHost>
EOF
  a2ensite nextcloud
  systemctl restart apache2
  clear
  green "Nextcloud should be online now"
  echo ""
  green "Your MySQL Username: 'nextcloud'"
  green "Your MySQL Database: 'nextclouddb'"
  green "your MySQL Password: 'YOUR-PASSWORD' if not changed"
  green "check out http://yourip/nextcloud"
  sleep 20
  return 0
  fi
}
########################################################################
#   Virtualisation Hypervisors                                         #
########################################################################
function proxmoxhyper {
  errorhandling
  if [ $1 = start_pvehyper ]; then
    echo "deb http://download.proxmox.com/debian/pve stretch pve-no-subscription" > /etc/apt/sources.list.d/pve-install-repo.list
    wget http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg
    apt-get update -y && apt-get dist-upgrade -y
    apt-get install proxmox-ve open-iscsi -y
    apt-get install postfix -y
    apt-get remove os-prober -y
    red "Please check for error's if some oncurred"
    sleep 1
    red "If no errors onccured the interface should be\navailible under:"
    green "'https://youripaddress:8006'"
    sleep 10
  return 0
fi
}
########################################################################
#   Mail safety Installations                                          #
########################################################################
function proxmoxmailgw {
  errorhandling
  if [ $1 = start_pvegw ]; then
  green "Installing proxmox mail gateway"
  sleep 2
  echo "deb http://download.proxmox.com/debian/pmg stretch pmg-no-subscription" > /etc/apt/sources.list.d/pve-install-repo.list
  wget http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg
  apt-get update -y
  apt-get install proxmox-mailgateway -y
  green "If no errors onccured the interface should be\navailible under 'https://youripaddress:8006'"
  sleep 5
  return 0
fi
}
########################################################################
#   Network Storage                                                    #
########################################################################
function nfs_server {
  errorhandling
  _printPoweredBy
  if [ $1 = start_nfs_server ]; then
    green "Starting the installation of NFS"
    redb "Enter your IP-adress from the client Server and press [ENTER]:"
    read ipaddress
    redb  "where you wanna store the Data? (we will create an folder on /mnt/ eg. 'networkstorage'):"
    read nfs_path
    echo "$ipaddress , $nfs_path"
    green "installing..."
    sleep 3
    apt-get install nfs-kernel-server -y
    green "creating export directory"
    sleep 3
    if [[ -d /var/nfs-export ]]; then
      echo ""
    else
      mkdir /var/nfs-export
    fi
    sleep 3
    if [[ -d $nfs_path ]]; then
      echo ""
    else
      mkdir /mnt/$nfs_path
    fi
    echo "/mnt/$nfs_path $ipaddress(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
    green "reloading all NFS exports"
    sleep 2
    exportfs -a
    systemctl enable nfs-kernel-server
    yellowb "Installation successfuly finished."
    sleep 10
    return 0
  fi
}
########################################################################
#  Teampass Online Password Safe                                       #
########################################################################
function F_teampass {
  green "loading errorhandling..."
  errorhandling
  if [[ $1 = start_teampass ]]; then
    if ! which nginx > /dev/null 2>&1; then
      green "Perfect... Nginx not installed"
      sleep 5
    else
      red "Nginx is not supported. Please install Apache2 or disable Nginx"
    fi
    if ! which apache2 > /dev/null 2>&1; then
      apt-get install apache2 -y > /dev/null
    fi
    if ! which mysql > /dev/null 2>&1; then
      green "installing Mysql Server"
      apt-get install mariadb-server -y > /dev/null
      mysql_secure_installation
    else
      red "MySQL is Installed continue whit installation"
    fi
    apt-get install php7.0 php7.0-ldap php7.0-mysql php7.0-mcrypt php7.0-mbstring php7.0-fpm php7.0-common php7.0-xml php7.0-gd openssl php7.0-mysql php7.0-curl php7.0-bcmath -y > /dev/null
    service apache2 restart
    if ! which phpmyadmin > /dev/null 2>&1; then
        yellow "PHPmyAdmin is not installed"
        apt-get install phpmyadmin -y
        green  "Please navigate to your PHPmyAdmin. There create a new Database and User."
        sleep 10
        apt-get install zip -y > /dev/null
        wget --no-check-certificate https://github.com/nilsteampassnet/TeamPass/archive/master.zip &>/dev/null
        unzip master.zip
        rm master.zip
        mv TeamPass-master/ /var/www/html/teampass
        chmod -R 0777 /var/www/html/teampass/includes/config
        chmod -R 0777 /var/www/html/teampass/includes/avatars
        chmod -R 0777 /var/www/html/teampass/includes/libraries/csrfp/libs
        chmod -R 0777 /var/www/html/teampass/includes/libraries/csrfp/log
        chmod -R 0777 /var/www/html/teampass/includes/libraries/csrfp/js
        chmod -R 0777 /var/www/html/teampass/backups
        chmod -R 0777 /var/www/html/teampass/files
        chmod -R 0777 /var/www/html/teampass/includes
        chmod -R 0777 /var/www/html/teampass/install
        chmod -R 0777 /var/www/html/teampass/upload
        green  "You can now navigate to: yourip/teampass."
        sleep 10
    fi
    return 0
fi
}
########################################################################
# Auto Update                                                          #
########################################################################
function F_autoupdate {
  green "Loading errorhandling..."
  errorhandling
  green "loaded... & starting now"
  red "is not implemented at the moment!!!"
    return 0
}
########################################################################
# Webmin Online System Management                                      #
########################################################################
function F_webmin {
  green "importing errortrap..."
  errorhandling
  green "loaded & starting now..."
  sleep 2
  if [[ $1 = start_webmin ]]; then
    if [[ ! -f /etc/apt/sources.list.d/webmin.list  ]]; then
      sh -c 'echo "deb http://download.webmin.com/download/repository sarge contrib" > /etc/apt/sources.list.d/webmin.list'
    else
      red "File alredy there..."
    fi
    green "downloading the key"
    sleep 2
    wget -qO - http://www.webmin.com/jcameron-key.asc | apt-key add -
    apt-get update -y
    green "installing webmin"
    sleep 2
    apt-get install webmin -y
    green "you should now be able to use webmin"
    green "check youripaddress:10000"
    sleep 10
    return 0
  fi
}
########################################################################
# Gitlab                                                               #
########################################################################
function F_gitlab {
  if [[ $1 = start_gitlab ]]; then
    green "importing errortrap..."
    errorhandling
    green "loaded & starting now..."
    sleep 2
    green "installing curl openssh postfix and ca-certificate"
    sleep 2
    apt install curl openssh-server ca-certificates postfix -y
    curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | bash
    green "installing gitlab"
    apt install gitlab-ce -y
    green "reconfigure gitlab"
    gitlab-ctl reconfigure
    green "gitlab should be installed now"
    red "going back to the menu"
    sleep 5
  fi
  return 0
}
########################################################################
# Open Media Vault                                                     #
########################################################################
function F_openmediavault {
  green "importing errortrap..."
  errorhandling
  green "loaded & starting now..."
  sleep 2
  if [[ $1 = start_openmedia ]]; then
    if [[ ! -f /etc/apt/sources.list.d/openmediavault.list  ]]; then
      cat <<EOF >> /etc/apt/sources.list.d/openmediavault.list
      deb http://packages.openmediavault.org/public arrakis main
      # deb http://downloads.sourceforge.net/project/openmediavault/packages arrakis main
      ## Uncomment the following line to add software from the proposed repository.
      # deb http://packages.openmediavault.org/public arrakis-proposed main
      # deb http://downloads.sourceforge.net/project/openmediavault/packages arrakis-proposed main
      ## This software is not part of OpenMediaVault, but is offered by third-party
      ## developers as a service to OpenMediaVault users.
      # deb http://packages.openmediavault.org/public arrakis partner
      # deb http://downloads.sourceforge.net/project/openmediavault/packages arrakis partner
EOF
    export LANG=C
    export DEBIAN_FRONTEND=noninteractive
    export APT_LISTCHANGES_FRONTEND=none
    apt-get update
    apt-get --allow-unauthenticated install openmediavault-keyring
    apt-get update
    apt-get --yes --auto-remove --show-upgraded \
      --allow-downgrades --allow-change-held-packages \
      --no-install-recommends \
      --option Dpkg::Options::="--force-confdef" \
      --option DPkg::Options::="--force-confold" \
      install postfix openmediavault
      # Initialize the system and database.
      omv-initsystem
    else
      red "alredy installed..."
    fi
    clear
    green "default username:'admin'"
    green "default password: 'openmediavault'"
    sleep 10
      return 0
  fi
}
########################################################################
#   Wordpress Installation                                             #
########################################################################
function F_wordpress {
    if [[ $1 = start_wpinstall ]]; then
  clear
  _printPoweredBy
  sleep 5
  green "Please enter your Subdomain or IP address"
  read wp_subomain
  wpapache=apache2
  wpnginx=nginx
  if (( $(ps -ef | grep -v grep | grep $wpapache | wc -l) > 0 ))
  then
    echo "$wpapache is running!!!"
    apacheinstalled=1
  else
    echo "$wpapache is offline!!! or not installed"
    apacheinstalled=2
  fi
  if (( $(ps -ef | grep -v grep | grep $wpnginx | wc -l) > 0 ))
  then
    echo "$wpnginx is running!!!"
    nginxinstalled=1
  else
    echo "$wpnginx is offline!!! or not installed"
    nginxinstalled=2
  fi
  if [[ $apacheinstalled = 1 && $nginxinstalled = 2 ]]; then
    green "Perfect continue..."
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 1 ]]; then
    yellow "nginx is used instead of apache"
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 2 ]]; then
    yellow "installing apache2..."
    apt install apache2 -y
  else
    red "can't find out what is installed..."
  fi
  yellow "installing all php extencions"
  aptitude install -y php7.0 php7.0-common php7.0-fpm php7.0-cli php7.0-json
  aptitude install -y php7.0-curl php7.0-intl php7.0-mcrypt php-pear php7.0-mysql
  aptitude install -y php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring
  a2enmod proxy_fcgi setenvif
  a2enconf php7.0-fpm
  service apache2 restart
  yellow "Checking if MariaDB is installed"
  UP=$(pgrep mysqld | wc -l);
  if [ "$UP" = 0 ];
  then
    red "MariaDB is not installed...";
    yellow "Installing it in the background..."
    apt-get install mariadb-server -y >> /dev/null
    clear
    mysql_secure_installation <<EOF
y
secret
secret
y
y
y
y
EOF
  clear
  _printPoweredBy
  else
    green "MySQL server is allredy installed"
  fi
  green "creating MySQL Databasename"
  green "creating MySQL User"
  green "creating MySQL Password"
  sleep 2
  mysqldbname="mswp$$"
  mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
  mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
  yellow "create database whit password and name"
  mysql -u root -psecret -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
  mysql -u root -psecret -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
  mysql -u root -psecret -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
  mysql -u root -psecret -e "FLUSH PRIVILEGES;"
  green "preparing Wordpress..."
  sleep 2
  aptitude install zip -y >> /dev/null
  wget https://wordpress.org/latest.zip -P /var/www/html
  cd /var/www/html
  unzip latest.zip >> /dev/null
  rm latest.zip
  cd /root
  chown -R www-data:www-data /var/www/html/drupal
  cat <<EOF >>/etc/apache2/sites-available/$wp_subomain.conf
  <VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        ServerName $wp_subomain

        ServerAdmin webmaster@$wp_subomain
        DocumentRoot /var/www/html/wordpress

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog ${APACHE_LOG_DIR}/wordpress.log
        CustomLog ${APACHE_LOG_DIR}/wordpress.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf
  </VirtualHost>
EOF
  a2ensite $wp_subomain.conf
  service apache2 reload
  cat <<EOF >>WP-Settings.txt
##############################
Databasename: $mysqldbname
Databasename: $mysqlusername
DB-Password: $mysqlpw
##############################
EOF
  yellow "Databasename: $mysqldbname"
  yellow "Databaseusername: $mysqlusername"
  yellow "DB-Password: $mysqlpw"
  red "Your MySQL information is also available in / root WP-Settings.TXT."
  red "Check out $wp_subomain its should be ready now."
  sleep 10
  return 0
fi
}
########################################################################
#   Drupal 8.5 Installation                                            #
########################################################################
function F_drupal {
    if [[ $1 = start_drupalinstall ]]; then
  clear
  _printPoweredBy
  sleep 5
  green "Please enter your Subdomain or IP address"
  read $drupal_subomain
  wpapache=apache2
  wpnginx=nginx
  if (( $(ps -ef | grep -v grep | grep $wpapache | wc -l) > 0 ))
  then
    echo "$wpapache is running!!!"
    apacheinstalled=1
  else
    echo "$wpapache is offline!!! or not installed"
    apacheinstalled=2
  fi
  if (( $(ps -ef | grep -v grep | grep $wpnginx | wc -l) > 0 ))
  then
    echo "$wpnginx is running!!!"
    nginxinstalled=1
  else
    echo "$wpnginx is offline!!! or not installed"
    nginxinstalled=2
  fi
  if [[ $apacheinstalled = 1 && $nginxinstalled = 2 ]]; then
    green "Perfect continue..."
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 1 ]]; then
    yellow "nginx is used instead of apache"
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 2 ]]; then
    yellow "installing apache2..."
    apt install apache2 -y
  else
    red "can't find out what is installed..."
  fi
  yellow "installing all php extencions"
  aptitude install -y php7.0 php7.0-common php7.0-fpm php7.0-cli php7.0-json
  aptitude install -y php7.0-curl php7.0-intl php7.0-mcrypt php-pear php7.0-mysql
  aptitude install -y php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring
  a2enmod proxy_fcgi setenvif
  a2enconf php7.0-fpm
  service apache2 restart
  yellow "Checking if MariaDB is installed"
  UP=$(pgrep mysqld | wc -l);
  if [ "$UP" = 0 ];
  then
    red "MariaDB is not installed...";
    yellow "Installing it in the background..."
    apt-get install mariadb-server -y >> /dev/null
    clear
    mysql_secure_installation <<EOF
y
secret
secret
y
y
y
y
EOF
  green "creating MySQL Databasename"
  green "creating MySQL User"
  green "creating MySQL Password"
  sleep 2
  mysqldbname="mswp$$"
  mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
  mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
  yellow "create database whit password and name"
  mysql -u root -psecret -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
  mysql -u root -psecret -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
  mysql -u root -psecret -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
  mysql -u root -psecret -e "FLUSH PRIVILEGES;"
  clear
  _printPoweredBy
  else
    yellow "Pease enter the MySQL password"
    read rootmysqlpw
    green "creating MySQL Databasename"
    green "creating MySQL User"
    green "creating MySQL Password"
    sleep 2
    mysqldbname="mswp$$"
    mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
    mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
    yellow "create database whit password and name"
    mysql -u root -prootmysqlpw -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -prootmysqlpw -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
    mysql -u root -prootmysqlpw -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
    mysql -u root -prootmysqlpw -e "FLUSH PRIVILEGES;"
    green "MySQL server is allredy installed"
  fi
  green "preparing Drupal..."
  sleep 2
  aptitude install zip -y >> /dev/null
  wget https://ftp.drupal.org/files/projects/drupal-8.5.0.zip -P /var/www/html
  cd /var/www/html
  unzip drupal-8.5.0.zip >> /dev/null
  rm drupal-8.5.0.zip
  mv /var/www/html/drupal-8.5.0 /var/www/html/drupal
  cd /root
  chown -R www-data:www-data /var/www/html/drupal
  cat <<EOF >>/etc/apache2/sites-available/$drupal_subomain.conf
  <VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        ServerName $wp_subomain

        ServerAdmin webmaster@$drupal_subomain
        DocumentRoot /var/www/html/drupal

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog ${APACHE_LOG_DIR}/drupal.log
        CustomLog ${APACHE_LOG_DIR}/drupal.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf
  </VirtualHost>
EOF
  a2ensite $wp_subomain.conf
  service apache2 reload
  cat <<EOF >>Drupal-Settings.txt
##############################
Databasename: $mysqldbname
Databasename: $mysqlusername
DB-Password: $mysqlpw
##############################
EOF
  yellow "Databasename: $mysqldbname"
  yellow "Databaseusername: $mysqlusername"
  yellow "DB-Password: $mysqlpw"
  red "Your MySQL information is also available in / root Drupal-Settings.TXT."
  red "Check out $drupal_subomain its should be ready now."
  sleep 5
  return 0
fi
}
########################################################################
#   Joomla Installation                                                #
########################################################################
function F_joomla {
    if [[ $1 = start_joomlainstall ]]; then
  clear
  _printPoweredBy
  sleep 5
  green "Please enter your Subdomain or IP address"
  read $drupal_subomain
  wpapache=apache2
  wpnginx=nginx
  if (( $(ps -ef | grep -v grep | grep $wpapache | wc -l) > 0 ))
  then
    echo "$wpapache is running!!!"
    apacheinstalled=1
  else
    echo "$wpapache is offline!!! or not installed"
    apacheinstalled=2
  fi
  if (( $(ps -ef | grep -v grep | grep $wpnginx | wc -l) > 0 ))
  then
    echo "$wpnginx is running!!!"
    nginxinstalled=1
  else
    echo "$wpnginx is offline!!! or not installed"
    nginxinstalled=2
  fi
  if [[ $apacheinstalled = 1 && $nginxinstalled = 2 ]]; then
    green "Perfect continue..."
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 1 ]]; then
    yellow "nginx is used instead of apache"
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 2 ]]; then
    yellow "installing apache2..."
    apt install apache2 -y
  else
    red "can't find out what is installed..."
  fi
  yellow "installing all php extencions"
  aptitude install -y php7.0 php7.0-common php7.0-fpm php7.0-cli php7.0-json
  aptitude install -y php7.0-curl php7.0-intl php7.0-mcrypt php-pear php7.0-mysql
  aptitude install -y php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring
  a2enmod proxy_fcgi setenvif
  a2enconf php7.0-fpm
  service apache2 restart
  yellow "Checking if MariaDB is installed"
  UP=$(pgrep mysqld | wc -l);
  if [ "$UP" = 0 ];
  then
    red "MariaDB is not installed...";
    yellow "Installing it in the background..."
    apt-get install mariadb-server -y >> /dev/null
    clear
    mysql_secure_installation <<EOF
y
secret
secret
y
y
y
y
EOF
  green "creating MySQL Databasename"
  green "creating MySQL User"
  green "creating MySQL Password"
  sleep 2
  mysqldbname="mswp$$"
  mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
  mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
  yellow "create database whit password and name"
  mysql -u root -psecret -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
  mysql -u root -psecret -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
  mysql -u root -psecret -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
  mysql -u root -psecret -e "FLUSH PRIVILEGES;"
  clear
  _printPoweredBy
  else
    yellow "Pease enter the MySQL password"
    read rootmysqlpw
    green "creating MySQL Databasename"
    green "creating MySQL User"
    green "creating MySQL Password"
    sleep 2
    mysqldbname="mswp$$"
    mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
    mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
    yellow "create database whit password and name"
    mysql -u root -prootmysqlpw -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -prootmysqlpw -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
    mysql -u root -prootmysqlpw -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
    mysql -u root -prootmysqlpw -e "FLUSH PRIVILEGES;"
    green "MySQL server is allredy installed"
  fi
  green "preparing Wordpress..."
  sleep 2
  aptitude install zip -y >> /dev/null
  wget http://dev.mocis.sh/files/Joomla_3.8.6.zip -P /var/www/html/joomla
  cd /var/www/html/joomla
  unzip Joomla_3.8.6.zip >> /dev/null
  rm Joomla_3.8.6.zip
  cd /root
  chown -R www-data:www-data /var/www/html/joomla
  cat <<EOF >>/etc/apache2/sites-available/$drupal_subomain.conf
  <VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        ServerName $wp_subomain

        ServerAdmin webmaster@$drupal_subomain
        DocumentRoot /var/www/html/drupal

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog ${APACHE_LOG_DIR}/drupal.log
        CustomLog ${APACHE_LOG_DIR}/drupal.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf
  </VirtualHost>
EOF
  a2ensite $wp_subomain.conf
  service apache2 reload
  cat <<EOF >>Drupal-Settings.txt
##############################
Databasename: $mysqldbname
Databaseusernamename: $mysqlusername
DB-Password: $mysqlpw
##############################
EOF
  yellow "Databasename: $mysqldbname"
  yellow "Databaseusername: $mysqlusername"
  yellow "DB-Password: $mysqlpw"
  red "Your MySQL information is also available in / root Drupal-Settings.TXT."
  red "Check out $drupal_subomain its should be ready now."
  sleep 5
  return 0
fi
}
########################################################################
#   Webspell Installation                                              #
########################################################################
function F_webspell {
    if [[ $1 = start_webspellinstall ]]; then
  clear
  _printPoweredBy
  sleep 5
  green "Please enter your Subdomain or IP address"
  read $drupal_subomain
  wpapache=apache2
  wpnginx=nginx
  if (( $(ps -ef | grep -v grep | grep $wpapache | wc -l) > 0 ))
  then
    echo "$wpapache is running!!!"
    apacheinstalled=1
  else
    echo "$wpapache is offline!!! or not installed"
    apacheinstalled=2
  fi
  if (( $(ps -ef | grep -v grep | grep $wpnginx | wc -l) > 0 ))
  then
    echo "$wpnginx is running!!!"
    nginxinstalled=1
  else
    echo "$wpnginx is offline!!! or not installed"
    nginxinstalled=2
  fi
  if [[ $apacheinstalled = 1 && $nginxinstalled = 2 ]]; then
    green "Perfect continue..."
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 1 ]]; then
    yellow "nginx is used instead of apache"
  elif [[ $apacheinstalled = 2 && $nginxinstalled = 2 ]]; then
    yellow "installing apache2..."
    apt install apache2 -y
  else
    red "can't find out what is installed..."
  fi
  yellow "installing all php extencions"
  aptitude install -y php7.0 php7.0-common php7.0-fpm php7.0-cli php7.0-json
  aptitude install -y php7.0-curl php7.0-intl php7.0-mcrypt php-pear php7.0-mysql
  aptitude install -y php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring
  a2enmod proxy_fcgi setenvif
  a2enconf php7.0-fpm
  service apache2 restart
  yellow "Checking if MariaDB is installed"
  UP=$(pgrep mysqld | wc -l);
  if [ "$UP" = 0 ];
  then
    red "MariaDB is not installed...";
    yellow "Installing it in the background..."
    apt-get install mariadb-server -y >> /dev/null
    clear
    mysql_secure_installation <<EOF
y
secret
secret
y
y
y
y
EOF
  green "creating MySQL Databasename"
  green "creating MySQL User"
  green "creating MySQL Password"
  sleep 2
  mysqldbname="mswp$$"
  mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
  mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
  yellow "create database whit password and name"
  mysql -u root -psecret -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
  mysql -u root -psecret -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
  mysql -u root -psecret -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
  mysql -u root -psecret -e "FLUSH PRIVILEGES;"
  clear
  _printPoweredBy
  else
    yellow "Pease enter the MySQL password"
    read rootmysqlpw
    green "creating MySQL Databasename"
    green "creating MySQL User"
    green "creating MySQL Password"
    sleep 2
    mysqldbname="mswp$$"
    mysqlusername=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5 ; echo '')
    mysqlpw=wp$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
    yellow "create database whit password and name"
    mysql -u root -prootmysqlpw -e "CREATE DATABASE ${mysqldbname} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -prootmysqlpw -e "CREATE USER ${mysqlusername}@localhost IDENTIFIED BY '${mysqlpw}';"
    mysql -u root -prootmysqlpw -e "GRANT ALL PRIVILEGES ON ${mysqldbname}.* TO '${mysqlusername}'@'localhost';"
    mysql -u root -prootmysqlpw -e "FLUSH PRIVILEGES;"
    green "MySQL server is allredy installed"
  fi
  green "preparing Wordpress..."
  sleep 2
  aptitude install zip -y >> /dev/null
  wget http://dev.mocis.sh/files/Webspell_1_2_5.zip -P /var/www/html
  cd /var/www/html
  unzip Webspell_1_2_5.zip >> /dev/null
  rm Webspell_1_2_5.zip
  cd /root
  mv /var/www/html/Webspell_1_2_5 /var/www/html/webspell
  chown -R www-data:www-data /var/www/html/joomla
  cat <<EOF >>/etc/apache2/sites-available/$drupal_subomain.conf
  <VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        ServerName $wp_subomain

        ServerAdmin webmaster@$drupal_subomain
        DocumentRoot /var/www/html/drupal

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog ${APACHE_LOG_DIR}/drupal.log
        CustomLog ${APACHE_LOG_DIR}/drupal.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf
  </VirtualHost>
EOF
  a2ensite $wp_subomain.conf
  service apache2 reload
  cat <<EOF >>Drupal-Settings.txt
##############################
Databasename: $mysqldbname
Databaseusernamename: $mysqlusername
DB-Password: $mysqlpw
##############################
EOF
  yellow "Databasename: $mysqldbname"
  yellow "Databaseusername: $mysqlusername"
  yellow "DB-Password: $mysqlpw"
  red "Your MySQL information is also available in / root Drupal-Settings.TXT."
  red "Check out $drupal_subomain its should be ready now."
  sleep 5
  return 0
fi
}
