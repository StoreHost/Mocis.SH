# This file was automatically generated by Dist::Zilla::Plugin::MakeMaker v6.003.
use strict;
use warnings;

use 5.006;

use ExtUtils::MakeMaker;

my %WriteMakefileArgs = (
  "ABSTRACT" => "A Glimpse at an Enlightened Perl",
  "AUTHOR" => "Chris Prather <chris\@prather.org>",
  "CONFIGURE_REQUIRES" => {
    "ExtUtils::MakeMaker" => 0
  },
  "DISTNAME" => "Task-Kensho",
  "LICENSE" => "perl",
  "MIN_PERL_VERSION" => "5.006",
  "NAME" => "Task::Kensho",
  "PREREQ_PM" => {
    "strict" => 0,
    "warnings" => 0
  },
  "TEST_REQUIRES" => {
    "File::Spec" => 0,
    "Module::Metadata" => 0,
    "Test::More" => 0
  },
  "VERSION" => "0.39",
  "test" => {
    "TESTS" => "t/*.t"
  }
);


my %FallbackPrereqs = (
  "File::Spec" => 0,
  "Module::Metadata" => 0,
  "Test::More" => 0,
  "strict" => 0,
  "warnings" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.029
requires('Task::Kensho::Async', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Async (Async Programming)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::CLI', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::CLI (Useful Command-line Tools)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Config', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Config (Config Modules)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::DBDev', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::DBDev (Database Development)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Dates', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Dates (Date Modules)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Email', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Email (Email)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::ExcelCSV', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::ExcelCSV (Excel/CSV)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Exceptions', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Exceptions (Exception Handling)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Hackery', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Hackery (Script Hackery)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Logging', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Logging (Logging)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::ModuleDev', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::ModuleDev (Module Development)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::OOP', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::OOP (Object Oriented Programming)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Scalability', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Scalability (Scalability)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Testing', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Testing (Testing)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::Toolchain', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::Toolchain (Basic Toolchain)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::WebCrawling', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::WebCrawling (Web Crawling)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::WebDev', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::WebDev (Web Development)? [Y/n]", 'Y') =~ /^y/i;
requires('Task::Kensho::XML', $WriteMakefileArgs{VERSION})
  if prompt("install Task::Kensho::XML (XML Development)? [Y/n]", 'Y') =~ /^y/i;


unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.029
sub _add_prereq {
  my ($mm_key, $module, $version_or_range) = @_;
  warn "$module already exists in $mm_key -- need to do a sane metamerge!"
    if exists $WriteMakefileArgs{$mm_key}{$module}
      and $WriteMakefileArgs{$mm_key}{$module} ne ($version_or_range || 0);
  warn "$module already exists in FallbackPrereqs -- need to do a sane metamerge!"
    if exists $FallbackPrereqs{$module} and $FallbackPrereqs{$module} ne ($version_or_range || 0);
  $WriteMakefileArgs{$mm_key}{$module} = $FallbackPrereqs{$module} = $version_or_range || 0;
  return;
}

sub requires { goto &runtime_requires }

sub runtime_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(PREREQ_PM => $module, $version_or_range);
}
